#!/usr/bin/env bash
set -euo pipefail

# create_terraform_tree.sh
# Idempotent script to create a recommended Terraform folder layout
# Usage: ./create_terraform_tree.sh [BASE_DIR]

BASE_DIR="${1:-$(pwd)}"
TF_ROOT="$BASE_DIR/terraform"

# Customize these as needed
LAYERS=("layers/shared" "layers/core" "layers/app" "layers/network" "layers/backend" "layers/config")
MODULES=("virtual_network" "storage_account" "app_service" "container_registry" "postgresql" "cosmosdb" "redis" "key_vault" "function_app" "monitoring")
ENVS=("dev" "uat" "prod" "qa")

mkdir_p() {
  for d in "$@"; do
    if [[ ! -d "$d" ]]; then
      mkdir -p "$d"
      echo "created: $d"
    else
      echo "exists:  $d"
    fi
  done
}

write_if_missing() {
  local path="$1"; shift
  if [[ -e "$path" ]]; then
    return
  fi
  mkdir -p "$(dirname "$path")"
  cat > "$path" <<'EOF'
$2
EOF
}

# Ensure root terraform folder
mkdir_p "$TF_ROOT"

# Create modules directory and sample module skeletons
mkdir_p "$TF_ROOT/modules"
for m in "${MODULES[@]}"; do
  MODULE_DIR="$TF_ROOT/modules/$m"
  mkdir_p "$MODULE_DIR"
  # add .gitkeep
  touch "$MODULE_DIR/.gitkeep"
  # sample README and placeholder files if missing
  if [[ ! -f "$MODULE_DIR/README.md" ]]; then
    cat > "$MODULE_DIR/README.md" <<-README
# Module: $m

Description: Terraform module for $m.

Usage example:

module "$m" {
  source = "../modules/$m"
  # add module inputs
}
README
  fi
  if [[ ! -f "$MODULE_DIR/main.tf" ]]; then
    cat > "$MODULE_DIR/main.tf" <<-TF
// main.tf - module $m
// Add resources for this module
TF
  fi
  if [[ ! -f "$MODULE_DIR/variables.tf" ]]; then
    cat > "$MODULE_DIR/variables.tf" <<-TF
// variables.tf - module $m
TF
  fi
  if [[ ! -f "$MODULE_DIR/outputs.tf" ]]; then
    cat > "$MODULE_DIR/outputs.tf" <<-TF
// outputs.tf - module $m
TF
  fi
done

# Create layers
for layer in "${LAYERS[@]}"; do
  LDIR="$TF_ROOT/$layer"
  mkdir_p "$LDIR"
  touch "$LDIR/.gitkeep"
  if [[ ! -f "$LDIR/README.md" ]]; then
    cat > "$LDIR/README.md" <<-README
# Layer: $(basename "$layer")

Purpose: This layer contains Terraform code for the $(basename "$layer") layer.

Structure recommendations:
- main.tf
- variables.tf
- outputs.tf
- providers.tf (if required)

README
  fi
  # create a placeholder main.tf if missing
  if [[ ! -f "$LDIR/main.tf" ]]; then
    cat > "$LDIR/main.tf" <<-TF
// main.tf for layer $(basename "$layer")
// Add resources, modules and data sources for this layer.
TF
  fi
done

# Create environments
mkdir_p "$TF_ROOT/environments"
for env in "${ENVS[@]}"; do
  EDIR="$TF_ROOT/environments/$env"
  mkdir_p "$EDIR"
  touch "$EDIR/.gitkeep"
  # conf/ folder removed by request; no environment conf created
  # example backend.tf template
  if [[ ! -f "$EDIR/backend.tf" ]]; then
    cat > "$EDIR/backend.tf" <<-TF
// backend.tf - configure remote state for environment: $env
// Example (fill values):
// terraform {
//   backend "azurerm" {
//     resource_group_name  = "<rg>"
//     storage_account_name = "<sa>"
//     container_name       = "tfstate"
//     key                  = "environments/$env/terraform.tfstate"
//   }
// }
TF
  fi
  if [[ ! -f "$EDIR/vars.tfvars" ]]; then
    cat > "$EDIR/vars.tfvars" <<-TFVARS
// variables specific for $env
// define values for module inputs and layers
TFVARS
  fi
  if [[ ! -f "$EDIR/README.md" ]]; then
    cat > "$EDIR/README.md" <<-README
# Environment: $env

This directory holds environment-specific configuration (tfvars, backend settings).

Use the root Makefile or CI to run terraform init/plan/apply per environment.
README
  fi
done

# Optional top-level helper files
if [[ ! -f "$TF_ROOT/README.md" ]]; then
  cat > "$TF_ROOT/README.md" <<-README
# Terraform Repository Layout

Recommended layout generated by create_terraform_tree.sh

- modules/: reusable modules
- layers/: opinionated layer code (shared, core, app, network, backend)
- environments/: per-environment tfvars and backend configs (dev/uat/prod)

Follow GitOps/CI patterns to manage state and deployments.
README
fi

# Create a simple Makefile at repo root for common tasks
REPO_MAKEFILE="$BASE_DIR/Makefile"
if [[ ! -f "$REPO_MAKEFILE" ]]; then
  cat > "$REPO_MAKEFILE" <<-MAKE
.PHONY: fmt init plan apply

fmt:
	terraform fmt -recursive terraform

init:
	@echo "Init per-environment: make init ENV=dev"
	terraform -chdir=terraform/environments/$(echo "${ENVS[0]}") init

plan:
	@echo "Plan usage: make plan ENV=dev"
	terraform -chdir=terraform/environments/$(echo "${ENVS[0]}") plan -var-file=vars.tfvars

apply:
	@echo "Apply usage: make apply ENV=dev"
	terraform -chdir=terraform/environments/$(echo "${ENVS[0]}") apply -var-file=vars.tfvars
MAKE
fi

# Summary
echo "\nTerraform folder tree created under: $TF_ROOT"
find "$TF_ROOT" -maxdepth 3 -type d -print

echo "Done. Review README files and update backend.tf and tfvars for each environment."
